<?xml version="1.0"?>
<ruleset name="Uberflip Coding Standard">
  <description>Uberflip PSR-2 coding standard</description>

  <!-- To accomodate for large single file -->
  <ini name="memory_limit" value="1024M"/>

  <!-- Limiting sniffer to only apply to php files -->
  <arg name="extensions" value="php"/>

  <!-- Format output to be in full form for verbosity -->
  <arg name="report" value="full"/>

  <!-- Converts tab to spacing -->
  <arg name="tab-width" value="4"/>

  <!--
  Ignored for now due to the use of require and define in the same file
  causing warning messages
  -->
  <exclude-pattern>*/bootstrap/autoload.php</exclude-pattern>

  <!-- Excludes third party folder's code for sniffing -->
  <exclude-pattern>*/vendor/*</exclude-pattern>
  <exclude-pattern>*/cache/*</exclude-pattern>
  <exclude-pattern>*/storage/*</exclude-pattern>
  <exclude-pattern>*/database/*</exclude-pattern>
  <exclude-pattern>*/public/*</exclude-pattern>

  <!--
  PHP code must not use short open tags, but since this standard recognizes both <? and <?= as short open tags,
  It will not be enforced since <?= acts more of an alias for <?php echo
  <rule ref="Generic.PHP.DisallowShortOpenTag"/>
  -->

  <!-- PHP code MUST use only UTF-8 without BOM. -->
  <rule ref="Generic.Files.ByteOrderMark"/>

  <!-- Class constants MUST be declared in all upper case with underscore separators. -->
  <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>

  <!-- When present, there MUST be one blank line after the namespace declaration. -->
  <rule ref="vendor/squizlabs/php_codesniffer/src/Standards/PSR2/Sniffs/Namespaces/NamespaceDeclarationSniff.php"/>

  <!-- When present, all use declarations MUST go after the namespace declaration.
      There MUST be one use keyword per declaration.
      There MUST be one blank line after the use block. -->
  <rule ref="vendor/squizlabs/php_codesniffer/src/Standards/PSR2/Sniffs/Namespaces/UseDeclarationSniff.php"/>

  <rule ref="vendor/squizlabs/php_codesniffer/src/Standards/Squiz/Sniffs/PHP/NonExecutableCodeSniff.php"/>

  <!-- PHP keywords must be in lower case. -->
  <rule ref="Squiz.Functions.LowercaseFunctionKeywords"/>

  <!-- Controll structure must be in lower case. -->
  <rule ref="Squiz.ControlStructures.LowercaseDeclaration"/>

  <!-- PHP code MUST use the long <?php ?> tags or the short-echo <?= ?> tags; it MUST NOT use the other tag variations. -->
  <rule ref="Generic.PHP.DisallowShortOpenTag.EchoFound">
    <severity>0</severity>
  </rule>

  <!-- Class names MUST be declared in StudlyCaps. -->
  <rule ref="Squiz.Classes.ValidClassName"/>

  <!-- All PHP files MUST use the Unix LF (linefeed) line ending. -->
  <rule ref="Generic.Files.LineEndings">
    <properties>
      <property name="eolChar" value="\n"/>
    </properties>
  </rule>

  <!-- The closing ?> tag MUST be omitted from files containing only PHP. -->
  <rule ref="vendor/squizlabs/php_codesniffer/src/Standards/PSR2/Sniffs/Files/ClosingTagSniff.php"/>

  <!-- There MUST NOT be more than one statement per line. -->
  <rule ref="Generic.Formatting.DisallowMultipleStatements"/>

  <!-- Visibility MUST be declared on all methods. -->
  <!-- <rule ref="Squiz.Scope.MethodScope"/> -->
  <rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing"/>

  <!-- Method names SHOULD NOT be prefixed with a single underscore to indicate protected or private visibility. -->
  <rule ref="vendor/squizlabs/php_codesniffer/src/Standards/PSR2/Sniffs/Methods/MethodDeclarationSniff.php"/>

  <!-- Method names MUST NOT be declared with a space after the method name. The opening brace MUST go on its own line, and the closing brace MUST go on the next line following the body. There MUST NOT be a space after the opening parenthesis, and there MUST NOT be a space before the closing parenthesis. -->
  <!-- checked in Methods/FunctionClosingBraceSniff -->
  <rule ref="Squiz.Functions.FunctionDeclaration"/>
  <rule ref="Squiz.Functions.LowercaseFunctionKeywords"/>

  <rule ref="Squiz.ControlStructures.ForLoopDeclaration"/>
  <rule ref="Squiz.ControlStructures.LowercaseDeclaration"/>

  <!-- PHP keywords MUST be in lower case. -->
  <rule ref="Generic.PHP.LowerCaseKeyword"/>

  <!-- A file SHOULD declare new symbols (classes, functions, constants, etc.) and cause no other side effects, or it SHOULD execute logic with side effects, but SHOULD NOT do both. -->
  <rule ref="vendor/squizlabs/php_codesniffer/src/Standards/PSR1/Sniffs/Files/SideEffectsSniff.php"/>

  <!-- Visibility MUST be declared on all properties.
  The var keyword MUST NOT be used to declare a property.
  There MUST NOT be more than one property declared per statement.
  Property names SHOULD NOT be prefixed with a single underscore to indicate protected or private visibility. -->
  <rule ref="PEAR.Functions.ValidDefaultValue"/>

  <!-- When making a method or function call, there MUST NOT be a space between the method or function name and the opening parenthesis, there MUST NOT be a space after the opening parenthesis, and there MUST NOT be a space before the closing parenthesis. In the argument list, there MUST NOT be a space before each comma, and there MUST be one space after each comma.
  Argument lists MAY be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list MUST be on the next line, and there MUST be only one argument per line. -->
  <rule ref="Generic.Functions.FunctionCallArgumentSpacing"/>
  <rule ref="PSR2.Methods.FunctionCallSignature.SpaceAfterCloseBracket">
    <severity>0</severity>
  </rule>

  <rule ref="Squiz.WhiteSpace.ScopeClosingBrace"/>
  <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration"/>
  <rule ref="Squiz.ControlStructures.ForLoopDeclaration"/>
  <rule ref="Squiz.ControlStructures.LowercaseDeclaration"/>

  <!-- Code MUST use an indent of 4 spaces, and MUST NOT use tabs for indenting. -->
  <rule ref="Generic.WhiteSpace.ScopeIndent">
    <properties>
      <property name="ignoreIndentationTokens" type="array" value="T_COMMENT,T_DOC_COMMENT_OPEN_TAG"/>
    </properties>
  </rule>
  <rule ref="Generic.WhiteSpace.DisallowTabIndent"/>

  <!-- The body of each structure MUST be enclosed by braces. This standardizes how the structures look, and reduces the likelihood of introducing errors as new lines get added to the body. -->
  <rule ref="Generic.ControlStructures.InlineControlStructure"/>

  <!-- The case statement MUST be indented once from switch, and the break keyword (or other terminating keyword) MUST be indented at the same level as the case body. There MUST be a comment such as // no break when fall-through is intentional in a non-empty case body. -->
  <rule ref="vendor/squizlabs/php_codesniffer/src/Standards/PSR2/Sniffs/ControlStructures/SwitchDeclarationSniff.php"/>

  <rule ref="vendor/squizlabs/php_codesniffer/src/Standards/PSR2/Sniffs/Methods/FunctionClosingBraceSniff.php"/>

  <!-- The keyword elseif SHOULD be used instead of else if so that all control keywords look like single words. -->
  <rule ref="vendor/squizlabs/php_codesniffer/src/Standards/PSR2/Sniffs/ControlStructures/ElseIfDeclarationSniff.php"/>

  <!-- Argument lists MAY be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list MUST be on the next line, and there MUST be only one argument per line. When the argument list is split across multiple lines, the closing parenthesis and opening brace MUST be placed together on their own line with one space between them. -->
  <rule ref="Squiz.Functions.MultiLineFunctionDeclaration"/>

  <!-- There MUST NOT be trailing whitespace at the end of non-blank lines. -->
  <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace">
    <properties>
      <property name="ignoreBlankLines" value="true"/>
    </properties>
  </rule>
  <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.StartFile">
    <severity>0</severity>
  </rule>
  <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EndFile">
    <severity>0</severity>
  </rule>
  <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EmptyLines">
    <severity>0</severity>
  </rule>

  <!-- In the argument list, there MUST NOT be a space before each comma, and there MUST be one space after each comma. -->
  <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
    <properties>
      <property name="equalsSpacing" value="1"/>
    </properties>
  </rule>
  <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing.SpacingAfterHint">
    <severity>0</severity>
  </rule>

  <!-- All PHP files MUST end with a single blank line. -->
  <rule ref="vendor/squizlabs/php_codesniffer/src/Standards/PSR2/Sniffs/Files/EndFileNewlineSniff.php"/>

  <!-- Method names MUST be declared in camelCase(). -->
  <rule ref="vendor/squizlabs/php_codesniffer/src/Standards/PSR1/Sniffs/Methods/CamelCapsMethodNameSniff.php"/>

  <!-- Visibility MUST be declared on all properties.
      The var keyword MUST NOT be used to declare a property.
      There MUST NOT be more than one property declared per statement.
      Property names SHOULD NOT be prefixed with a single underscore to indicate protected or private visibility. -->
  <rule ref="vendor/squizlabs/php_codesniffer/src/Standards/PSR2/Sniffs/Classes/PropertyDeclarationSniff.php"/>

  <!-- The general style rules for control structures are as follows:
      There MUST be one space after the control structure keyword
      There MUST NOT be a space after the opening parenthesis
      There MUST NOT be a space before the closing parenthesis
      There MUST be one space between the closing parenthesis and the opening brace
      The structure body MUST be indented once
      The closing brace MUST be on the next line after the body -->
  <rule ref="Squiz.ControlStructures.ControlSignature"/>
  <rule ref="Squiz.WhiteSpace.ControlStructureSpacing" />
  <!--
      When 3.0 is released, change this to:
      <rule ref="Squiz.WhiteSpace.ControlStructureSpacing.SpacingAfterOpen" />
      <rule ref="Squiz.WhiteSpace.ControlStructureSpacing.SpacingBeforeClose" />
  -->
  <rule ref="Squiz.WhiteSpace.ControlStructureSpacing.SpacingAfterOpenBrace">
    <severity>0</severity>
  </rule>
  <rule ref="Squiz.WhiteSpace.ControlStructureSpacing.SpaceBeforeCloseBrace">
    <severity>0</severity>
  </rule>
  <rule ref="Squiz.WhiteSpace.ControlStructureSpacing.LineAfterClose">
    <severity>0</severity>
  </rule>
  <rule ref="Squiz.WhiteSpace.ControlStructureSpacing.NoLineAfterClose">
    <severity>0</severity>
  </rule>

  <!-- Namespaces and classes MUST follow PSR-0.
      This means each class is in a file by itself, and is in a namespace of at least one level: a top-level vendor name. -->
  <rule ref="vendor/squizlabs/php_codesniffer/src/Standards/PSR1/Sniffs/Classes/ClassDeclarationSniff.php"/>

  <!-- The extends and implements keywords MUST be declared on the same line as the class name.
      The opening brace for the class go MUST go on its own line; the closing brace for the class MUST go on the next line after the body.
      Lists of implements MAY be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list MUST be on the next line, and there MUST be only one interface per line. -->
 <rule ref="vendor/squizlabs/php_codesniffer/src/Standards/PSR2/Sniffs/Classes/ClassDeclarationSniff.php"/>
</ruleset>
